services:

  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    networks:
      - task-flow-network

  kafka:
    image: docker.io/bitnami/kafka:3.7
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - task-flow-network

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      timeout: 10s
      retries: 10
    networks:
      - task-flow-network

  api-gateway:
    image: "taskflow/api-gateway"
    container_name: "api-gateway"
    ports:
      - "8072:8072"
    depends_on:
      task-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      report-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      redis:
        condition: service_healthy
      config-service:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "api-gateway"
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eurekaserver:8070/eureka/
      SPRING_CONFIG_IMPORT: configserver:http://configserver:8071/
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
    networks:
      - task-flow-network

  config-service:
    image: "taskflow/configservice"
    container_name: config-service
    ports:
      - "8071:8071"
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - task-flow-network

  taskDb:
    image: postgres
    container_name: task-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: task-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - task-flow-network
  userDb:
    image: postgres
    container_name: user-db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - task-flow-network
  reportDb:
    image: postgres
    container_name: report-db
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: report-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - task-flow-network
  notificationDb:
    image: postgres
    container_name: notification-db
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: notification-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - task-flow-network

  eureka-service:
    image: "taskflow/eureka-service"
    container_name: eureka-service
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      taskDb:
        condition: service_healthy
      config-service:
        condition: service_healthy
    environment:
      SPRING_APPLICATON_NAME: "eureka-service"
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8071/
    networks:
      - task-flow-network

  task-service:
    image: "taskflow/task-service"
    container_name: task-service
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
       config-service:
          condition: service_healthy
       taskDb:
           condition: service_healthy
    environment:
        SPRING_APPLICATION_NAME: "task-service"
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8070/eureka/
        SPRING_CONFIG_IMPORT: configserver:http://config-service:8071/
        SPRING_DATASOURCE_URL: "jdbc:postgresql://taskDb:5432/task-db"
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: password
        SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    networks:
      - task-flow-network

  user-service:
    image: "taskflow/user"
    container_name: user-service
    ports:
      - "9020:9020"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      config-service:
        condition: service_healthy
      userDb:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "user-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8070/eureka/
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8071/
      SPRING_DATASOURCE_URL: "jdbc:postgresql://userDb:5433/user-db"
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    networks:
      - task-flow-network

  report-service:
    image: "taskflow/report"
    container_name: report-service
    ports:
      - "9010:9010"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      config-service:
        condition: service_healthy
      reportDb:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "report-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8070/eureka/
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8071/
      SPRING_DATASOURCE_URL: "jdbc:postgresql://reportDb:5434/report-db"
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    networks:
      - task-flow-network

  notification-service:
    image: "taskflow/notification"
    container_name: notification-service
    ports:
      - "9000:9000"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      config-service:
        condition: service_healthy
      notificationDb:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "notification-service"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service:8070/eureka/
      SPRING_CONFIG_IMPORT: configserver:http://config-service:8071/
      SPRING_DATASOURCE_URL: "jdbc:postgresql://notificationDb:5432/notification-db"
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    networks:
      - task-flow-network

volumes:
  kafka_data:
    driver: local

networks:
  task-flow-network:
    driver: "bridge"
